import React, { useState , useEffect } from "react";
import { useNavigate } from "react-router-dom";
import { useDispatch, useSelector } from "react-redux";
import {createCheckout} from "../../Redux/slices/checkoutSlice";
import axios from "axios";
function Checkout() {
  const dispatch = useDispatch();
  const {carts , loading:cartloading ,error:cartError} = useSelector((state)=>state.cart);
  const {checkout,loading:checkoutloading,error:checkouterror} = useSelector((state)=> state.checkout)
  const navigate = useNavigate();
  console.log(carts,"jjj")

  const [checkoutId, setcheckoutId] = useState(null);
  const [shippingAdress, setshippingAdress] = useState({
    email: "",
    firstname: "",
    lastname: "",
    address: "",
    country: "",
    city: "",
    postalCode: "",
    phone: "",
  });

  const loadScript = (src) => {
    return new Promise((resolve) => {
      const script = document.createElement("script");
      script.src = src;
      script.onload = () => resolve(true);
      script.onerror = () => resolve(false);
      document.body.appendChild(script);
    });
  };

  const handelFormdata = async (e) => {
    e.preventDefault();
    console.log("reached");
    const newformdata = {
      ...shippingAdress,
      firstname: e.target.firstname.value,
      lastname: e.target.lastname.value,
      email: e.target.email.value,
      address: e.target.address.value,
      country: e.target.country.value,
      city: e.target.city.value,
      postalCode: e.target.postalCode.value,
      phone: e.target.phone.value,
    };
    setshippingAdress(newformdata);
    setcheckoutId(123);
    //
    console.log(carts,"cart detail");
    const checkoutData = {
       checkoutItems:carts.products,
        shippingAddress:newformdata,
        paymentMethod:"upi",
        totalPrice:carts.totalPrice
    }
     console.log("request");
   // get order id from backend 
   const ans  = await dispatch(createCheckout(checkoutData));
  console.log(ans,"respons");
  console.log(ans?.payload?.createorderRazorpay?.id, "idddd");
    // Load Razorpay Script
    const res = await loadScript(
      "https://checkout.razorpay.com/v1/checkout.js"
    );
    if (!res) {
      alert("Razorpay SDK failed to load.");
      return;
    }
    const options = {
      key: import.meta.env.VITE_Rajaropay_Test_Key, // Replace with your Test Key from Razorpay Dashboard 
      amount: carts.totalPrice * 100, // amount in paise
      currency: "INR",
      name: "My Store",
      description: "Order Payment",
      image: "https://picsum.photos/50/50",
      // Fake order_id for frontend testing
      
       order_id: ans?.payload?.createorderRazorpay?.id,  // if i remove its showing , it must get generated by  backend
      handler: async function (response) {
             
        console.log("Payment Successful:", response);
        const paymentverify =await axios.post(`${import.meta.env.VITE_BACKEND_URL}/checkout/${ans?.payload?.checkoutId}/pay`,{
         verifyDetails:{
        razorpay_order_id:response.razorpay_order_id,
        razorpay_payment_id:response.razorpay_payment_id,
        razorpay_signature:response.razorpay_signature
      } ,
      paymentDetails:ans?.payload?.createorderRazorpay

        })
        console.log(paymentverify)

    if(paymentverify.data.success){
      let createOrder = await axios.post(`${import.meta.env.VITE_BACKEND_URL}/checkout/${ans?.payload?.checkoutId}/finalize`)
      console.log(createOrder);
      navigate("/order-confirmation");
    }else{
   alert("payment failed");

    }
      },
      prefill: {
        name: `${newformdata.firstname} ${newformdata.lastname}`,
        email: newformdata.email,
        contact: newformdata.phone,
      },
      notes: {
        address: newformdata.address,
      },
      theme: {
        color: "#3399cc",
      },
    };

    const paymentObject = new window.Razorpay(options);
    paymentObject.open();
  };
if(cartloading) return <p>Loading cart details ...</p>
if(cartError) return <p>Error cart Loading...</p>
  return (
    <div>
      <div className="grid grid-cols-1 rtl sm:grid-cols-2 max-w-7xl gap-8 py-1 px-3 h-fit">
        <div className="h-fit sm:h-full p-2 w-full shadow-2xs border-gray-50 order-2">
          <h3 className="text-2xl uppercase mb-3 font-medium">Checkout --</h3>
          <p className="text-lg mb-2 font-semibold">Contact Details</p>
          <form className="flex flex-col w-full" onSubmit={handelFormdata}>
            <label htmlFor="email">Email</label>
            <input
              type="email"
              name="email"
              id="email"
              className="bg-gray-100 h-[32px] p-1 outline-gray-400 block w-[99%]"
            />
            <p className="text-lg mb-2 font-semibold">Delivery</p>
            <div className="grid sm:grid-cols-2 mb-1">
              <div>
                <label htmlFor="firstname" className="uppercase">
                  first name
                </label>
                <input
                  type="text"
                  name="firstname"
                  id="firstname"
                  className="bg-gray-100 block h-[32px] p-1 w-[100%] sm:w-[97%] outline-gray-400 "
                />
              </div>
              <div>
                <label htmlFor="lastname" className="uppercase">
                  last name
                </label>
                <input
                  type="text"
                  name="lastname"
                  id="lastname"
                  className="bg-gray-100 block w-[100%] sm:w-[97%] outline-gray-400 h-[32px]"
                />
              </div>
            </div>

            <label htmlFor="address">Address</label>
            <input
              type="text"
              name="adress"
              id="address"
              className="bg-gray-100 h-[32px] p-1 outline-gray-400 block w-[99%] mb-1"
            />

            <div className="grid sm:grid-cols-2 mb-1">
              <div>
                <label htmlFor="city">City</label>
                <input
                  type="text"
                  name="city"
                  id="city"
                  className="bg-gray-100 block h-[32px] p-1 w-[100%] sm:w-[97%] outline-gray-400"
                />
              </div>
              <div>
                <label htmlFor="postalCode">PostalCode</label>
                <input
                  type="number"
                  name="postalCode"
                  id="postalCode"
                  className="bg-gray-100 block h-[32px] p-1 w-[100%] sm:w-[97%] outline-gray-400"
                />
              </div>
            </div>
            <label htmlFor="country">Country</label>
            <input
              type="text"
              name="country"
              id="country"
              className="bg-gray-100 h-[32px] p-1 outline-gray-400 block w-[99%] mb-1"
            />

            <label htmlFor="phone">phone</label>
            <input
              type="number"
              name="phone"
              id="phone"
              className="bg-gray-100 h-[32px] p-1 outline-gray-400 block w-[99%] mb-3"
            />
            <button
              type="submit"
              className="bg-black text-lg text-white py-1 px-4"
            >
              Proceed to Payment
            </button>
          </form>
        </div>
        <div className="bg-gray-100 h-full p-2 border-b-2 border-gray-200 order-1">
          <h2 className="text-2xl uppercase text-gray-500 border-b-2 pb-2 border-gray-200">
            cart <span className="text-black">totals --</span>
          </h2>
          <div>
            {carts.products && carts.products.map((product) => (
              <div className="m-2" key={product.produtId}>
                <div className="flex justify-between">
                  <div className="flex gap-3">
                    <img
                      className="h-[70px] w-[70px]"
                      src={product.images}
                      alt=""
                    />
                    <div>
                      <p className="text-black">{product.name}</p>
                      <p className="text-gray-700">Size {product.size}</p>
                      <p className="text-gray-700">Color {product.color}</p>
                    </div>
                  </div>
                  <p className="text-black">${product.price}</p>
                </div>
              </div>
            ))}
           
          </div>
          <div className="mt-4 border-t-2 border-gray-200 pt-4">
            <div className="flex justify-between mb-2 ">
              <p className="text-black">Subtotal</p>
              <p className="">{carts.totalPrice} </p>
            </div>
            <div className="flex justify-between mb-2">
              <p className="text-black">Shipping</p>
              <p className="">$0</p>
            </div>
            <div className="flex justify-between mb-2 pt-4 border-t-2 border-gray-200 ">
              <p className="text-black font-bold">Total</p>
              <p className="text-black font-bold">${carts.totalPrice} </p>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}

export default Checkout;
